:root {
  --blade-hue: 120;
  --blade-lightness: 50%;
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

body {
  background: #222;
  display: grid;
  grid-template-columns: repeat(6, 1fr);
  grid-template-rows: 100px 50px 1fr;
  min-height: 100vh;
  place-items: center;
  font-family: 'Source Sans Pro', sans-serif;
  text-transform: uppercase;
  font-size: 1.5rem;
}

/* The color pickers */

[name='color'] {
  grid-row: 1 / 2;
  align-self: end;
  margin: 0.5em;
}

label:not(.hilt) {
  color: white;
  font-weight: bold;
  align-self: start;
}

/* Lightsaber styling */

.lightsaber {
  margin-top: 25vh;
  grid-column: 1 / -1;
  position: relative;
}

#on-off {
  position: absolute;
  width: 0;
  height: 0;
}

.hilt {
  display: block;
  width: 0.75rem;
  height: 7rem;
  background-color: red;
  border-radius: 0 0 4px 4px;

  /* If you just have   background-image: linear-gradient(silver 10px, black 20px, gold 30px);
     it will blend-in between colors.
     Below is the same as   background-image: linear-gradient(silver 0 10px, black 10 20px, gold 20 30px);
   */
  background-image: linear-gradient(
    silver 0 10px,
    hsl(39 75% 50%) 0 14px,
    silver 0 15px,
    black 0 20px,
    silver 0 22px,
    black 0 25px,
    silver 0 27px,
    black 0 30px,
    silver 0 32px,
    black 0 35px,
    silver 0 37px,
    black 0 40px,
    silver 0 42px,
    black 0 45px,
    silver 0 47px,
    black 0 50px,
    silver 0 60px,
    hsl(39 75% 50%) 60px 80px,
    silver 0 100%
  );
}

.blade {
  position: absolute;
  background: white;
  height: 350%;
  width: 100%;
  bottom: 100%; /* bottom is 100% is 100% offset from bottom , so it starts from the top */
  border-radius: 100vw 100vw 0 0;

  /*box-shadow: 0 0 1em limegreen;*/
  /* double up box-shadow value will make it more intense. The 1em, 1.5em, 2em, etc is making it more blur*/
  box-shadow:
    inset 0 0 4px hsl(var(--blade-hue) 100% 50% / 1), /* add smooth transaction for green by adding the inset part, you can comment out to see the effect */
    0 0 1em hsl(var(--blade-hue) 100% 50% / 0.8), /* for pure color, it is always 100% on the second value and 50% on the 3rd) */
    0 0 1.5em hsl(var(--blade-hue) 100% 50% / 0.7),
    0 0 2em hsl(var(--blade-hue) 100% 50% / 0.5),
    0 0 3em hsl(var(--blade-hue) 100% 50% / 0.3),
    0 0 5em hsl(var(--blade-hue) 100% 50% / 0.2);

  transition: transform 50ms ease-out;
  transform-origin: bottom;
}

.blade::after {
  content: ''; /* if you comment this one out, you will see the blade color */
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: hsl(var(--blade-hue) 100% 50%);
  border-radius: inherit;
  filter: blur(0.5em);

  /* you will see more clearly on animation with background changed to red */
  opacity: 1;
  animation: pulse linear 5s infinite;

  /* This will not work any more because transform below will create it's own context stack, Do the .blade::after solution instead */
  /*z-index: -1;*/
}

.blade::before {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
  background: white;
  border-radius: inherit;
  z-index: 10;
}

@keyframes pulse {
  50% {opacity: 0.5}
}

/* Turn lightsaber on and off */

/* Because the checkbox id is link to the label which is the .hilt.
  So whenever you click and unclick the .hilt, it will check and uncheck the checkbox */
#on-off:not(:checked) + .blade {
  transform: scaleY(0);
}

#on-off:checked + .blade {
  transform: scaleY(1);
}

/* change the color */

/* We want to target the .lightsaber's --blad-hue value
   Cannot use + because it's not a direct sibling, has to has ~, which means any sibling
*/
#green:checked ~ .lightsaber {
  --blade-hue: 120;
}

#blue:checked ~ .lightsaber {
  --blade-hue: 195;
}

#yellow:checked ~ .lightsaber {
  --blade-hue: 60;
}

#purple:checked ~ .lightsaber {
  --blade-hue: 290;
}

/*input[id='red']:checked ~ .lightsaber {*/
#red:checked ~ .lightsaber {
  --blade-hue: 360;
}


